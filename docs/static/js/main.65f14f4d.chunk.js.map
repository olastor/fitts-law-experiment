{"version":3,"sources":["components/Experiment.js","App.js","serviceWorker.js","index.js"],"names":["Experiment","state","isChasing","isWaitingForChasing","experimentResults","5","10","15","20","30","40","50","currentChaseStartTime","currentDiameter","currentMonsterOffsetX","currentMonsterOffsetY","counter","sessionId","concat","Date","toISOString","handleStartChasing","e","_this$state","_this","diametersNotDone","Object","entries","filter","_ref","_ref2","slicedToArray","length","map","_ref3","dia","parseInt","random","setState","setTimeout","handleStopChasing","_this$state2","elapsedTime","objectSpread","defineProperty","toConsumableArray","x","y","time","localStorage","setItem","_this$state3","this","react_default","a","createElement","react","className","onClick","style","width","height","top","left","opacity","onMouseOver","rows","value","JSON","stringify","React","Component","App","src_components_Experiment","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65f14f4d.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport './Experiment.css'\nimport { random } from 'lodash'\n\nconst DIAMETERS = [5, 10, 15, 20, 30, 40, 50]\n\nclass Experiment extends React.Component {\n  state = {\n    isChasing: false,\n    isWaitingForChasing: false,\n    experimentResults: { 5: [], 10: [], 15: [], 20: [], 30: [], 40: [], 50: [] },\n    currentChaseStartTime: 0,\n    currentDiameter: 0,\n    currentMonsterOffsetX: 0,\n    currentMonsterOffsetY: 0,\n    counter: 0,\n    sessionId: `fitts-experiment-${new Date().toISOString()}`\n  }\n\n  /**\n   * Start chasing of object with mouse cursor. Hide green dot and show monster.\n   */\n  handleStartChasing = (e) => {\n    const { experimentResults, isWaitingForChasing } = this.state\n\n    if (isWaitingForChasing) return\n\n    const diametersNotDone = Object.entries(experimentResults)\n      .filter(([dia, results]) => results.length < 20)\n      .map(([dia]) => parseInt(dia))\n\n    const currentDiameter = diametersNotDone[random(0, diametersNotDone.length - 1)]\n    const currentMonsterOffsetX = random(0, 1024 - currentDiameter, true)\n    const currentMonsterOffsetY = random(0, 768 - currentDiameter, true)\n\n    this.setState({\n      isChasing: false,\n      isWaitingForChasing: true\n    }, () => setTimeout(() => this.setState({\n      isChasing: true,\n      currentChaseStartTime: new Date(),\n      currentDiameter,\n      currentMonsterOffsetX,\n      currentMonsterOffsetY\n    }), random(0, 3000)))\n  }\n\n  /**\n   * Monster has been clicked. Stop the current iteration and\n   * log results.\n   */\n  handleStopChasing = (e) => {\n    const {\n      currentDiameter,\n      currentChaseStartTime,\n      currentMonsterOffsetX,\n      currentMonsterOffsetY,\n      experimentResults,\n      counter,\n      sessionId\n    } = this.state\n\n    const elapsedTime = new Date() - currentChaseStartTime\n\n    this.setState({\n      experimentResults: {\n        ...experimentResults,\n        [currentDiameter]: [\n          ...experimentResults[currentDiameter],\n          { x: currentMonsterOffsetX, y: currentMonsterOffsetY, time: elapsedTime }\n        ],\n      },\n      isChasing: false,\n      isWaitingForChasing: false,\n      currentDiameter: 0,\n      currentMonsterOffsetX: 0,\n      currentMonsterOffsetY: 0,\n      counter: counter + 1\n    }, () => localStorage.setItem(sessionId, this.state.experimentResults))\n  }\n\n  render() {\n    const {\n      isChasing,\n      isWaitingForChasing,\n      experimentResults,\n      currentDiameter,\n      currentMonsterOffsetX,\n      currentMonsterOffsetY,\n      counter\n    } = this.state\n\n    return <Fragment>\n      <div className='experiment'>\n        { counter < 120 &&\n          <div className='wrapper'>\n            { isChasing\n              ? <div\n                  className='monster'\n                  onClick={this.handleStopChasing}\n                  style={{\n                    width: currentDiameter,\n                    height: currentDiameter,\n                    top: currentMonsterOffsetY,\n                    left: currentMonsterOffsetX\n                  }}\n                />\n              : <div\n                className='green-dot'\n                style={isWaitingForChasing ? { opacity: 0.4 } : {}}\n                onMouseOver={this.handleStartChasing}\n              />\n            }\n          </div>\n        }\n        <textarea rows={10} value={JSON.stringify(experimentResults, null, 2)}/>\n      </div>\n      <div>{counter} / 120</div>\n    </Fragment>\n  }\n}\n\nexport default Experiment\n","import React from 'react'\nimport './App.css'\nimport Experiment from './components/Experiment'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Experiment />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}